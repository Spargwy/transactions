type ErrorPayload {
  message: String!
}

type User {
  id: Int!
  name: String
  balance: Int!
}

type Query {
  # Так-то текущий пользователь определяется по токену,
  # который передаёт клиент, но т.к. функционала аутентификации
  # и авторизации нет, то просто через id. 
  user(id: Int!): User
}

input WithdrawMoneyInput {
  userID: Int!
  # сумма в минимальных единицах валюты
  amount: Int!
}

input ReplenishTheBalanceInput {
  userID: Int!
  # сумма, в минимальных единицах валюты
  amount: Int!
}

input RegisterUserInput {
  name: String
}

type WithdrawMoneyPayload {
  amountWrittenOff: Int!
  userID: Int!
}

type ReplenishTheBalancePayload {
  replenishmentAmount: Int!
  userID: Int!
}

type RegisterUserPayload {
  user: User!
}

union RegisterUserOrErrorPayload = RegisterUserPayload | ErrorPayload
union WithdrawMoneyOrErrorPayload = WithdrawMoneyPayload | ErrorPayload
union ReplenishTheBalanceOrErrorPayload = ReplenishTheBalancePayload | ErrorPayload

type Mutation {
  withdrawMoney(input: WithdrawMoneyInput!): WithdrawMoneyOrErrorPayload!
  replenishTheBalance(input: ReplenishTheBalanceInput!): ReplenishTheBalanceOrErrorPayload!
  registerUser(input: RegisterUserInput!): RegisterUserOrErrorPayload!
}