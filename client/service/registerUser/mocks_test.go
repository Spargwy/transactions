// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package registerUser

import (
	"github.com/streadway/amqp"
	"sync"
	"transactions/model"
)

// Ensure, that EnvMock does implement Env.
// If this is not the case, regenerate this file with moq.
var _ Env = &EnvMock{}

// EnvMock is a mock implementation of Env.
//
// 	func TestSomethingThatUsesEnv(t *testing.T) {
//
// 		// make and configure a mocked Env
// 		mockedEnv := &EnvMock{
// 			CreateConsumerForQueueFunc: func(qname string)  {
// 				panic("mock out the CreateConsumerForQueue method")
// 			},
// 			CreateUserFunc: func(data *model.User) error {
// 				panic("mock out the CreateUser method")
// 			},
// 			CreateUserQueueFunc: func(userID int) (amqp.Queue, error) {
// 				panic("mock out the CreateUserQueue method")
// 			},
// 		}
//
// 		// use mockedEnv in code that requires Env
// 		// and then make assertions.
//
// 	}
type EnvMock struct {
	// CreateConsumerForQueueFunc mocks the CreateConsumerForQueue method.
	CreateConsumerForQueueFunc func(qname string)

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(data *model.User) error

	// CreateUserQueueFunc mocks the CreateUserQueue method.
	CreateUserQueueFunc func(userID int) (amqp.Queue, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateConsumerForQueue holds details about calls to the CreateConsumerForQueue method.
		CreateConsumerForQueue []struct {
			// Qname is the qname argument value.
			Qname string
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Data is the data argument value.
			Data *model.User
		}
		// CreateUserQueue holds details about calls to the CreateUserQueue method.
		CreateUserQueue []struct {
			// UserID is the userID argument value.
			UserID int
		}
	}
	lockCreateConsumerForQueue sync.RWMutex
	lockCreateUser             sync.RWMutex
	lockCreateUserQueue        sync.RWMutex
}

// CreateConsumerForQueue calls CreateConsumerForQueueFunc.
func (mock *EnvMock) CreateConsumerForQueue(qname string) {
	if mock.CreateConsumerForQueueFunc == nil {
		panic("EnvMock.CreateConsumerForQueueFunc: method is nil but Env.CreateConsumerForQueue was just called")
	}
	callInfo := struct {
		Qname string
	}{
		Qname: qname,
	}
	mock.lockCreateConsumerForQueue.Lock()
	mock.calls.CreateConsumerForQueue = append(mock.calls.CreateConsumerForQueue, callInfo)
	mock.lockCreateConsumerForQueue.Unlock()
	mock.CreateConsumerForQueueFunc(qname)
}

// CreateConsumerForQueueCalls gets all the calls that were made to CreateConsumerForQueue.
// Check the length with:
//     len(mockedEnv.CreateConsumerForQueueCalls())
func (mock *EnvMock) CreateConsumerForQueueCalls() []struct {
	Qname string
} {
	var calls []struct {
		Qname string
	}
	mock.lockCreateConsumerForQueue.RLock()
	calls = mock.calls.CreateConsumerForQueue
	mock.lockCreateConsumerForQueue.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *EnvMock) CreateUser(data *model.User) error {
	if mock.CreateUserFunc == nil {
		panic("EnvMock.CreateUserFunc: method is nil but Env.CreateUser was just called")
	}
	callInfo := struct {
		Data *model.User
	}{
		Data: data,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(data)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedEnv.CreateUserCalls())
func (mock *EnvMock) CreateUserCalls() []struct {
	Data *model.User
} {
	var calls []struct {
		Data *model.User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// CreateUserQueue calls CreateUserQueueFunc.
func (mock *EnvMock) CreateUserQueue(userID int) (amqp.Queue, error) {
	if mock.CreateUserQueueFunc == nil {
		panic("EnvMock.CreateUserQueueFunc: method is nil but Env.CreateUserQueue was just called")
	}
	callInfo := struct {
		UserID int
	}{
		UserID: userID,
	}
	mock.lockCreateUserQueue.Lock()
	mock.calls.CreateUserQueue = append(mock.calls.CreateUserQueue, callInfo)
	mock.lockCreateUserQueue.Unlock()
	return mock.CreateUserQueueFunc(userID)
}

// CreateUserQueueCalls gets all the calls that were made to CreateUserQueue.
// Check the length with:
//     len(mockedEnv.CreateUserQueueCalls())
func (mock *EnvMock) CreateUserQueueCalls() []struct {
	UserID int
} {
	var calls []struct {
		UserID int
	}
	mock.lockCreateUserQueue.RLock()
	calls = mock.calls.CreateUserQueue
	mock.lockCreateUserQueue.RUnlock()
	return calls
}
