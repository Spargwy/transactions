// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package replenishTheBalance

import (
	"sync"
	"transactions/model"
)

// Ensure, that EnvMock does implement Env.
// If this is not the case, regenerate this file with moq.
var _ Env = &EnvMock{}

// EnvMock is a mock implementation of Env.
//
// 	func TestSomethingThatUsesEnv(t *testing.T) {
//
// 		// make and configure a mocked Env
// 		mockedEnv := &EnvMock{
// 			CreateTransactionFunc: func(data *model.Transaction) error {
// 				panic("mock out the CreateTransaction method")
// 			},
// 			GetUserByIDFunc: func(id int) (*model.User, error) {
// 				panic("mock out the GetUserByID method")
// 			},
// 			PublishRMQMessageFunc: func(qName string, body []byte) error {
// 				panic("mock out the PublishRMQMessage method")
// 			},
// 		}
//
// 		// use mockedEnv in code that requires Env
// 		// and then make assertions.
//
// 	}
type EnvMock struct {
	// CreateTransactionFunc mocks the CreateTransaction method.
	CreateTransactionFunc func(data *model.Transaction) error

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(id int) (*model.User, error)

	// PublishRMQMessageFunc mocks the PublishRMQMessage method.
	PublishRMQMessageFunc func(qName string, body []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateTransaction holds details about calls to the CreateTransaction method.
		CreateTransaction []struct {
			// Data is the data argument value.
			Data *model.Transaction
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// ID is the id argument value.
			ID int
		}
		// PublishRMQMessage holds details about calls to the PublishRMQMessage method.
		PublishRMQMessage []struct {
			// QName is the qName argument value.
			QName string
			// Body is the body argument value.
			Body []byte
		}
	}
	lockCreateTransaction sync.RWMutex
	lockGetUserByID       sync.RWMutex
	lockPublishRMQMessage sync.RWMutex
}

// CreateTransaction calls CreateTransactionFunc.
func (mock *EnvMock) CreateTransaction(data *model.Transaction) error {
	if mock.CreateTransactionFunc == nil {
		panic("EnvMock.CreateTransactionFunc: method is nil but Env.CreateTransaction was just called")
	}
	callInfo := struct {
		Data *model.Transaction
	}{
		Data: data,
	}
	mock.lockCreateTransaction.Lock()
	mock.calls.CreateTransaction = append(mock.calls.CreateTransaction, callInfo)
	mock.lockCreateTransaction.Unlock()
	return mock.CreateTransactionFunc(data)
}

// CreateTransactionCalls gets all the calls that were made to CreateTransaction.
// Check the length with:
//     len(mockedEnv.CreateTransactionCalls())
func (mock *EnvMock) CreateTransactionCalls() []struct {
	Data *model.Transaction
} {
	var calls []struct {
		Data *model.Transaction
	}
	mock.lockCreateTransaction.RLock()
	calls = mock.calls.CreateTransaction
	mock.lockCreateTransaction.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *EnvMock) GetUserByID(id int) (*model.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("EnvMock.GetUserByIDFunc: method is nil but Env.GetUserByID was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(id)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//     len(mockedEnv.GetUserByIDCalls())
func (mock *EnvMock) GetUserByIDCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// PublishRMQMessage calls PublishRMQMessageFunc.
func (mock *EnvMock) PublishRMQMessage(qName string, body []byte) error {
	if mock.PublishRMQMessageFunc == nil {
		panic("EnvMock.PublishRMQMessageFunc: method is nil but Env.PublishRMQMessage was just called")
	}
	callInfo := struct {
		QName string
		Body  []byte
	}{
		QName: qName,
		Body:  body,
	}
	mock.lockPublishRMQMessage.Lock()
	mock.calls.PublishRMQMessage = append(mock.calls.PublishRMQMessage, callInfo)
	mock.lockPublishRMQMessage.Unlock()
	return mock.PublishRMQMessageFunc(qName, body)
}

// PublishRMQMessageCalls gets all the calls that were made to PublishRMQMessage.
// Check the length with:
//     len(mockedEnv.PublishRMQMessageCalls())
func (mock *EnvMock) PublishRMQMessageCalls() []struct {
	QName string
	Body  []byte
} {
	var calls []struct {
		QName string
		Body  []byte
	}
	mock.lockPublishRMQMessage.RLock()
	calls = mock.calls.PublishRMQMessage
	mock.lockPublishRMQMessage.RUnlock()
	return calls
}
